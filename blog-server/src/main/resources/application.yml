# 服务端口
server:
  port: 8080

# spring 基础配置
spring:
  # 数据源相关属性 - MySQL
  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://192.168.124.100:3306/blog?useUnicode=true&characterEncoding=UTF8&serverTimezone=Asia/Shanghai
    username: root
    password: 123456

  # 数据源相关属性 - H2
  #  h2:
  #    console:
  #      path: /h2-console #进入h2 web操作界面的路径
  #      enabled: true #开启h2 web界面
  #  datasource:
  #    driver-class-name: org.h2.Driver
  #    schema: classpath:db/schema-ddl-h2.sql
  #    data: classpath:db/data-dml-h2.sql
  #    url: jdbc:h2:mem:whoai
  #    username: root
  #    password: 123456
  # 仅用于自动建表
  #  jpa:
  #    database: MYSQL
  #    database-platform: org.hibernate.dialect.MySQL8Dialect
  #    generate-ddl: true
  #    show-sql: true
  #    hibernate:
  #      # 自动建表
  #      ddl-auto: update

  # elasticsearch 配置
  #  data:
  #    elasticsearch:
  #      repositories:
  #        enabled: true
  #  elasticsearch:
  #    rest:
  #      uris: http://localhost:9200

  # 视图前后缀
  mvc:
    view:
      prefix: /
      suffix: .html
    # 静态文件访问地址
    static-path-pattern: /**

  # 上传文件及请求大小限制 (2.0版本之后的配置)
  servlet:
    multipart:
      # 开启 multipart 上传功能
      enabled: true
      # 文件写入磁盘的阈值
      file-size-threshold: 2KB
      # 上传文件的临时路径：指向 Tomcat 服务器地址
      # location: /upload
      # 最大文件大小
      max-file-size: 10MB
      # 最大请求大小
      max-request-size: 10MB

  resources:
    static-locations:
      - classpath:/META-INF/resources/
      - classpath:/resources/
      - classpath:/static/
      - classpath:/public/

# Mybatis 配置，自动配置类会加载如下配置
mybatis:
  mapper-locations: classpath:mapper/*.xml
  type-aliases-package: com.whoai.blog.entity
  type-handlers-package: com.whoai.blog.config.handler
  configuration:
    # 在console打印sql语句，TODO 后续自定义一个输出格式
    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl

# Swagger 属性配置
swagger:
  enable: true
  application-name: ${spring.application.name}
  version: 1.0
  description: springfox swagger 3.0 Demo
  try-host: http://localhost:${server.port}

# 配置jwt相关属性
jwt:
  # header中的认证属性
  tokenHeader: Authorization
  # token的前缀，中间有个空格[Head token]
  tokenHead: Head
  # 加密密钥
  secret: test_secret
  # 过期时间，单位秒
  expire: 3600

# feign 启用断路器配置
feign:
  rpc-service: BLOG-FILE
  hystrix:
    enabled: true
  httpclient:
    enabled: true
    # 禁用ssl验证，默认 false
    disable-ssl-validation: false
    # 重定向配置，默认 true
    follow-redirects: false

# 服务降级配置
hystrix:
  command:
    default:
      execution:
        isolation:
          thread:
            # 服务降级超时时间，需要配合ribbon及feign的超时时间
            timeoutInMilliseconds: 15000

# ribbon 公共配置
ribbon:
  ConnectTimeout: 6000 #服务请求连接超时时间（毫秒）
  ReadTimeout: 6000 #服务请求处理超时时间（毫秒）
  OkToRetryOnAllOperations: true #对超时请求启用重试机制
  MaxAutoRetriesNextServer: 1 #切换重试实例的最大个数
  MaxAutoRetries: 1 # 切换实例后重试最大次数
  #  com.netflix.loadbalancer.RandomRule：从提供服务的实例中以随机的方式；
  #  com.netflix.loadbalancer.RoundRobinRule：以线性轮询的方式，就是维护一个计数器，从提供服务的实例中按顺序选取，第一次选第一个，第二次选第二个，以此类推，到最后一个以后再从头来过；
  #  com.netflix.loadbalancer.RetryRule：在RoundRobinRule的基础上添加重试机制，即在指定的重试时间内，反复使用线性轮询策略来选择可用实例；
  #  com.netflix.loadbalancer.WeightedResponseTimeRule：对RoundRobinRule的扩展，响应速度越快的实例选择权重越大，越容易被选择；
  #  com.netflix.loadbalancer.BestAvailableRule：选择并发较小的实例；
  #  com.netflix.loadbalancer.AvailabilityFilteringRule：先过滤掉故障实例，再选择并发较小的实例；
  #  com.netflix.loadbalancer.ZoneAwareLoadBalancer：采用双重过滤，同时过滤不是同一区域的实例和故障实例，选择并发较小的实例。
  NFLoadBalancerRuleClassName: com.netflix.loadbalancer.RoundRobinRule

# 日志配置
#logging:
#  # 日志配置文件
#  config: classpath:logback.xml
#  # 日志格式
#  pattern:
#    console: %d{yyyy/MM/dd-HH:mm:ss} [%thread] %-5level %logger- %msg%n
#    file: %d{yyyy/MM/dd-HH:mm} [%thread] %-5level %logger- %msg%n
#  #（具体包）输出的日志级别
#  level:
#    org.springframework: WARN
